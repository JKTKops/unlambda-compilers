#!/usr/bin/env bash
set -euo pipefail

compile_via_scheme() {
    runhaskell "CompileViaScheme.hs" "$1"
}

compile_via_c() {
    runhaskell "CompileViaC.hs" $mode "$1"
}

if [[ -z "$1" ]] || [[ "$1" == 'help' ]] || [[ "$1" == '--help' ]] ; then
  echo "usage: $0 [help|--help] [--backend (c|scheme)]
                  [--duplicate-arg|--delay-arg]
                  FILE"
  exit 0
fi

backend='scheme'
mode=''
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --backend)       backend="$2"          ; shift 2 ;;
        --duplicate-arg) mode="-duplicate-arg" ; shift   ;;
        --delay-arg)     mode="-delay-arg"     ; shift   ;;
        *)               args+=("$1")          ; shift   ;;
    esac
done
[[ "${#args[@]}" -le 0 ]] || set -- "${args[@]}"

case "$backend" in
    scheme) compile_via_scheme "$@" ;;
    c)      compile_via_c      "$@" ;;
    *) $0 help ; fatal "Unknown backend: $backend" ;;
esac